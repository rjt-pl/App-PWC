=head1 NAME

App::PWC::Users - Users object for App::PWC

=head1 USE WITH App::PWC

    use App::PWC;
    my $pwc      = App::PWC->new( %options );

    my $realname = $pwc->users->realname('ryan-thompson'); # "Ryan Thompson"
    my $members  = $pwc->users->members; # $members{'username'} = 'Real Name';
    my $guests   = $pwc->users->guests;  # as above

=head1 DIRECT USE (App::PWC INTERNAL)

    use App::PWC;

    my $conf  = App::PWC::Config->new( path => 'config/pwc.yaml' );
    my $users = App::PWC::Users->new(  base => $conf->repo('pwc-club') );

=head1 DESCRIPTION

This module manages the list of users for the L<App::PWC> system.

To this class, the user list is treated as read-only, and comes
directly from the C<perlweeklychallenge-club> git repository.

Normally you would get access to an object of this class via the
L<App::PWC> object, as in the first B<SYNOPSIS> section. For brevity,
the examples below will assume you have obtained the L<App::PWC::Users>
object by some means, into the C<$users> variable, such as by doing:

    my $users = $pwc->users;

=head1 CONSTRUCTOR

=head2 new( %options )

Creates a new users object. B<If you are using App::PWC, you do not
need to do call this constructor directly.>

    my $users = App::PWC::Users->new (
        base => '/path/to/perlweeklychallenge-club'
    )

=head1 METHODS

=head2 realname( $username )

    my $realname = $users->realname('ryan-thompson');

Returns the real name that belongs to the specified C<$username>.
This method checks both the B<members> and B<guests> lists, which
come from C<members.json> and C<guests.json> in the repository.

If the username is not found in either list, returns C<undef>.

If you need more direct access to both lists, they can be retrieved
with the next two methods.

=head2 members()

=head2 guests()

    my ($members, $guests) = ($users->members, $users->guests);

Returns a HASH ref containing all entries from the C<members.json>
or C<guests.json> file.

=head1 DIAGNOSTICS

=head2 Errors

This module will C<croak()> if the C<members.json> or C<guests.json> files
cannot be read, or are in an invalid format of some kind.

Otherwise, nonexistent usernames will return C<undef> as described in the
method.

=head2 Warnings

There are currently no warnings generated by this module. That may change in
the future, and those warnings will be signaled via C<carp()>.

=head1 AUTHOR

B<Ryan Thompson> E<lt>rjt@cpan.orgE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright 2024 Ryan Thompson

This program is free software; you can redistribute it
and/or modify it under the same terms as Perl itself.

L<http://dev.perl.org/licenses/artistic.html>
